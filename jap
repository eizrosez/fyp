// ignore_for_file: library_private_types_in_public_api, deprecated_member_use

import 'package:flutter/material.dart';
import 'dart:async';

class CloudBreathingPage extends StatefulWidget {
  const CloudBreathingPage({super.key});

  @override
  _CloudBreathingPageState createState() => _CloudBreathingPageState();
}

class _CloudBreathingPageState extends State<CloudBreathingPage>
    with TickerProviderStateMixin {
  late AnimationController _controller;
  bool isBreathing = false;
  String phase = "Start";
  int timeLeft = 4;
  String selectedMode = "Relax";
  Timer? timer;

  final Map<String, Map<String, int>> breathingTimes = {
    "Sleep": {"inhale": 5, "hold": 4, "exhale": 6},
    "Relax": {"inhale": 4, "hold": 4, "exhale": 4},
    "Stress": {"inhale": 4, "hold": 4, "exhale": 3},
    "Calm": {"inhale": 6, "hold": 4, "exhale": 6},
  };

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 1),
    );
  }

  void startBreathing() {
    if (isBreathing) {
      setState(() {
        isBreathing = false;
        phase = "Start";
        timer?.cancel();
      });
      _controller.stop();
      _controller.reset();
      return;
    }

    setState(() => isBreathing = true);
    _runBreathingCycle();
  }

  void updateTimer(int duration) {
    timer?.cancel();
    timeLeft = duration;
    timer = Timer.periodic(const Duration(seconds: 1), (t) {
      setState(() {
        timeLeft--;
        if (timeLeft <= 0) t.cancel();
      });
    });
  }

  Future<void> _runBreathingCycle() async {
    while (isBreathing) {
      if (!isBreathing) return;
      var times = breathingTimes[selectedMode]!;

      setState(() => phase = "Inhale");
      updateTimer(times["inhale"]!);
      _controller.duration = Duration(seconds: times["inhale"]!);
      _controller.forward();
      await Future.delayed(Duration(seconds: times["inhale"]!));
      if (!isBreathing) return;

      setState(() => phase = "Hold");
      updateTimer(times["hold"]!);
      await Future.delayed(Duration(seconds: times["hold"]!));
      if (!isBreathing) return;

      setState(() => phase = "Exhale");
      updateTimer(times["exhale"]!);
      _controller.reverse();
      await Future.delayed(Duration(seconds: times["exhale"]!));
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    timer?.cancel();
    isBreathing = false;
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    Color glowColor = {
      "Inhale": Colors.blue.withOpacity(0.6),
      "Hold": Colors.cyanAccent.withOpacity(0.9),
      "Exhale": Colors.blueGrey.withOpacity(0.4),
    }[phase] ?? Colors.grey.withOpacity(0.3);

    return Scaffold(
      backgroundColor: Colors.blue[100],
      appBar: AppBar(
        title: const Text("Cloud Breathing", style: TextStyle(color: Colors.white)),
        backgroundColor: Colors.blue[800],
        elevation: 0,
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: ["Sleep", "Relax", "Stress", "Calm"].map((option) =>
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 8.0),
                child: ChoiceChip(
                  label: Text(option),
                  selected: selectedMode == option,
                  onSelected: (selected) {
                    if (selected) {
                      setState(() {
                        selectedMode = option;
                        if (isBreathing) {
                          isBreathing = false;
                          timer?.cancel();
                          _controller.stop();
                          Future.delayed(const Duration(milliseconds: 500), startBreathing);
                        }
                      });
                    }
                  },
                  selectedColor: Colors.blue[400],
                  backgroundColor: Colors.grey[300],
                  labelStyle: TextStyle(
                    color: selectedMode == option ? Colors.white : Colors.black,
                  ),
                ),
              )).toList(),
          ),
          const SizedBox(height: 40),
          Text(
            phase,
            style: TextStyle(fontSize: 32, fontWeight: FontWeight.bold, color: Colors.blue[900]),
          ),
          Text(
            "$timeLeft sec",
            style: TextStyle(fontSize: 20, color: Colors.blue[700]),
          ),
          const SizedBox(height: 20),
          AnimatedBuilder(
            animation: _controller,
            builder: (context, child) {
              double cloudSizeFactor = (phase == "Hold") ? 1.3 : (1.0 + _controller.value * 0.3);
              return Container(
                height: 120 * cloudSizeFactor,
                width: 120 * cloudSizeFactor,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: Colors.white,
                  boxShadow: [
                    BoxShadow(
                      color: glowColor,
                      blurRadius: 30,
                      spreadRadius: 10,
                    )
                  ],
                ),
                child: child,
              );
            },
            child: const Icon(
              Icons.cloud,
              size: 60,
              color: Colors.blue,
            ),
          ),
          const SizedBox(height: 40),
          ElevatedButton(
            onPressed: startBreathing,
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 12),
              backgroundColor: isBreathing ? Colors.red : Colors.blue,
            ),
            child: Text(
              isBreathing ? "End" : "Start",
              style: const TextStyle(fontSize: 20, color: Colors.white),
            ),
          ),
        ],
      ),
    );
  }
}

